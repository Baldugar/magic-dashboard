# SCALAR TYPES

scalar SettingsMap

# TYPES
type ImageUri {
  border_crop: String!
  png: String!
  normal: String!
}

interface ApiCard {
  name: String!
  card_faces: [ApiCard!]
  image_uris: ImageUri
  cmc: Int!
}

interface ImportedCard {
  name: String!
  set: String!
  number: String!
  numOfCards: Int!
}

type Card implements ImportedCard & ApiCard {
  name: String!
  isCommander: Boolean!
  isCompanion: Boolean!
  set: String!
  number: String!
  numOfCards: Int!
  card_faces: [ApiCard!]
  image_uris: ImageUri
  cmc: Int!
}

enum Format {
  NONE
  STANDARD
  HISTORIC
  TRADITIONAL_STANDARD
  BRAWL
  FRIENDLY_BRAWL
  DIRECT_GAME
  TRADITIONAL_HISTORIC
  HISTORIC_BRAWL
  LIMITED
}

enum Settings {
  STACK_MODE
  DELETE_CARDS_ON_DELETE_COLUMN
  CONFIRM_ON_DELETE_CARD
  CONFIRM_ON_DELETE_COLUMN
}

type Deck {
  ID: String!
  name: String!
  image: String
  format: Format!
  cards: [Card!]!
}

type BoardColumn {
  name: String!
  cards: [Card!]!
}

type DeckBoard {
  columns: [BoardColumn!]!
  deckID: String!
}

type UserData {
  ID: String!
  username: String!
  avatar: String
  decks: [Deck]!
  settings: SettingsMap!
}

# INPUT

input GetUserDataInput {
  userID: String!
}

input GetBoardForDeckInput {
  deckID: String!
}

input ChangeUserDataInput {
  username: String
  avatar: String
}

input CreateDeckInput {
  name: String!
  image: String
  format: Format!
}

input DeleteDeckInput {
  deckID: String!
}

input ImageUriInput {
  border_crop: String!
  png: String!
  normal: String!
}

input ApiCardInput {
  name: String!
  card_faces: [ApiCardInput!]
  image_uris: ImageUriInput
  cmc: Int!
}

input CardInput {
  name: String!
  card_faces: [ApiCardInput!]
  image_uris: ImageUriInput
  cmc: Int!
  set: String!
  number: String!
  numOfCards: Int!
  isCommander: Boolean!
  isCompanion: Boolean!
}

input BoardColumnInput {
  name: String!
  cards: [CardInput!]!
}

input SaveDeckBoardInput {
  deckID: String!
  columns: [BoardColumnInput!]!
}

input SaveDeckInput {
  ID: String!
  name: String!
  image: String
  format: Format!
}

input DuplicateDeckInput {
  deckID: String!
  name: String!
}

input ChangeUserPasswordInput {
  userID: String!
  newPassword: String!
}

# QUERY

type Query {
  # Initial Query after login
  getUserData(input: GetUserDataInput!): UserData!
  getBoardForDeck(input: GetBoardForDeckInput!): DeckBoard!
}

# MUTATION

type Mutation {
  # Edit profile
  changeUserData(input: ChangeUserDataInput!): Boolean!
  # ChangePassword
  changeUserPassword(input: ChangeUserPasswordInput!): Boolean!
  # Create Deck
  createDeck(input: CreateDeckInput!): DeckBoard!
  # Delete Deck
  deleteDeck(input: DeleteDeckInput!): Boolean!
  # Duplicate Deck
  duplicateDeck(input: DuplicateDeckInput!): Deck!
  # Save Deck Metadata
  saveDeck(input: SaveDeckInput!): Boolean!
  # Save Deck Board
  saveDeckBoard(input: SaveDeckBoardInput!): Deck!
}
